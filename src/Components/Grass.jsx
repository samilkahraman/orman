/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 grass.glb --transform 
Files: grass.glb [720.46KB] > D:\Code\Fiverr\forest\public\grass-transformed.glb [169.18KB] (77%)
Author: Digital screen official (https://sketchfab.com/ck212575)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/realistics-grass-03-2589c4f89dac4bbfab7f66be615f262e
Title: Realistics grass 03
*/

// Based on https://codepen.io/al-ro/pen/jJJygQ by al-ro, but rewritten in react-three-fiber
import * as THREE from "three";
import React, { useRef, useMemo } from "react";
import SimplexNoise from "simplex-noise";
import { useFrame, useLoader } from "@react-three/fiber";
//These have been taken from "Realistic real-time grass rendering" by Eddie Lee, 2010
import bladeDiffuse from "/resources/blade_diffuse.jpg";
import bladeAlpha from "/resources/blade_alpha.jpg";
import soil from "/resources/soil.jpg";
import "./GrassMaterial";
import grass from "/resources/grass.jpg";

import { useGLTF } from "@react-three/drei";
import { useControls } from "leva";

export function Model(props) {
  const { nodes, materials } = useGLTF("/grass-transformed.glb");

  const treeSpacing = 8; // Adjust the spacing between trees
  const numTreesPerRow = 15; // Number of trees in each row
  return (
    <group
      {...props}
      dispose={null}
      position-z={-59}
      position-y={0}
      position-x={-60}
    >
      {Array.from({ length: 200 }).map((params, index) => {
        console.log(index);
        const scalingFactor = 1;
        const row = Math.floor(index / numTreesPerRow);
        const col = index % numTreesPerRow;
        const x = col * treeSpacing + (Math.random() - 0.5) * scalingFactor;
        const z = row * treeSpacing + (Math.random() - 0.5) * scalingFactor;

        return (
          <mesh
            scale={[2, 1, 1]}
            position={[x, 0, z]}
            geometry={nodes.Object_2.geometry}
            material={materials.Material}
            rotation={[-Math.PI / 2, 0, 0]}
          />
        );
      })}
    </group>
  );
}

useGLTF.preload("/grass-transformed.glb");

const simplex = new SimplexNoise(Math.random);

export default function Grass({
  options = { bW: 0.12, bH: 1, joints: 5 },
  width = 50000,

  ...props
}) {
  return (
    <mesh
      receiveShadow
      castShadow
      position={[104, -14, 186]}
      rotation={[-Math.PI / 2, 0, 0]}
    >
      <planeGeometry attach='geometry' args={[width, width, 32, 32]} />
      <meshPhysicalMaterial color={"#cdcb5f"} />
    </mesh>
  );
}
